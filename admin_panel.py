import asyncio
import logging
from datetime import datetime
from typing import List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ContextTypes, filters
)
from telegram.constants import ParseMode

from config import Config
from models import InterviewAnalysis, Position
from database import Database

logger = logging.getLogger(__name__)

class AdminPanel:
    """Admin panel for HR specialists"""
    
    def __init__(self):
        self.db = Database()
        self.admin_users = set()  # Set of admin user IDs
        
    def add_admin(self, user_id: int):
        """Add admin user"""
        self.admin_users.add(user_id)
    
    def is_admin(self, user_id: int) -> bool:
        """Check if user is admin"""
        return user_id in self.admin_users
    
    async def admin_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /admin command"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.")
            return
        
        message = """
üîß **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å HR-–±–æ—Ç–∞**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        keyboard = [
            [InlineKeyboardButton("üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="admin_results")],
            [InlineKeyboardButton("üë• –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –ø–æ –ø–æ–∑–∏—Ü–∏—è–º", callback_data="admin_candidates")],
            [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
    
    async def handle_admin_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle admin panel callbacks"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        if not self.is_admin(user_id):
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.")
            return
        
        if query.data == "admin_results":
            await self.show_recent_results(query, context)
        elif query.data == "admin_candidates":
            await self.show_candidates_by_position(query, context)
        elif query.data == "admin_stats":
            await self.show_statistics(query, context)
        elif query.data.startswith("result_"):
            analysis_id = query.data.split("_")[1]
            await self.show_detailed_result(query, context, analysis_id)
        elif query.data.startswith("position_filter_"):
            position = query.data.split("_")[2]
            await self.show_results_by_position(query, context, Position(position))
        elif query.data == "back_to_admin":
            await self.admin_start(update, context)
    
    async def show_recent_results(self, query, context: ContextTypes.DEFAULT_TYPE):
        """Show recent interview results"""
        # Get recent analyses from database
        analyses = self.get_recent_analyses(limit=10)
        
        if not analyses:
            message = "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–Ω—Ç–µ—Ä–≤—å—é."
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup)
            return
        
        message = "üìä **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é:**\n\n"
        
        keyboard = []
        for analysis in analyses:
            candidate = self.db.get_candidate(analysis.candidate_id)
            candidate_name = f"{candidate.first_name} {candidate.last_name}" if candidate else f"ID: {analysis.candidate_id}"
            
            status_emoji = "‚úÖ" if analysis.hr_recommendation == "recommended" else "‚ö†Ô∏è" if analysis.hr_recommendation == "needs_clarification" else "‚ùå"
            
            message += f"{status_emoji} **{candidate_name}** ({analysis.position.value.upper()})\n"
            message += f"   –û—Ü–µ–Ω–∫–∞: {analysis.overall_score:.2f}/1.0\n"
            message += f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {self.get_recommendation_text(analysis.hr_recommendation)}\n\n"
            
            keyboard.append([InlineKeyboardButton(
                f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {candidate_name}",
                callback_data=f"result_{analysis.candidate_id}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
    
    async def show_detailed_result(self, query, context: ContextTypes.DEFAULT_TYPE, candidate_id: int):
        """Show detailed interview result"""
        analysis = self.db.get_candidate_analysis(int(candidate_id))
        candidate = self.db.get_candidate(int(candidate_id))
        
        if not analysis or not candidate:
            await query.edit_message_text("–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        candidate_name = f"{candidate.first_name} {candidate.last_name}" if candidate else f"ID: {candidate_id}"
        
        message = f"""
üìã **–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ—Ä–≤—å—é**

üë§ **–ö–∞–Ω–¥–∏–¥–∞—Ç:** {candidate_name}
üìß **Username:** @{candidate.username}
üéØ **–ü–æ–∑–∏—Ü–∏—è:** {analysis.position.value.upper()}
üìÖ **–î–∞—Ç–∞:** {analysis.created_at.strftime('%d.%m.%Y %H:%M')}

üìä **–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞:** {analysis.overall_score:.2f}/1.0

üîç **–û—Ü–µ–Ω–∫–∞ –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º:**
"""
        
        for competency, score in analysis.competency_scores.items():
            message += f"   ‚Ä¢ {competency}: {score:.2f}/1.0\n"
        
        message += f"""
üí¨ **–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:** {analysis.communication_skills}
üìà **–£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞:** {analysis.experience_level}
üéØ **–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤:** {analysis.originality_score:.2f}/1.0

üìù **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
"""
        
        for rec in analysis.recommendations:
            message += f"   ‚Ä¢ {rec}\n"
        
        message += f"""
‚úÖ **–ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** {self.get_recommendation_text(analysis.hr_recommendation)}

üìÑ **–†–µ–∑—é–º–µ:**
{analysis.summary}
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="admin_results")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
    
    async def show_candidates_by_position(self, query, context: ContextTypes.DEFAULT_TYPE):
        """Show candidates grouped by position"""
        message = "üë• **–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –ø–æ –ø–æ–∑–∏—Ü–∏—è–º:**\n\n"
        
        keyboard = [
            [InlineKeyboardButton("üíº –ü—Ä–æ–¥–∞–∂–∏", callback_data="position_filter_sales")],
            [InlineKeyboardButton("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="position_filter_qa")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
    
    async def show_results_by_position(self, query, context: ContextTypes.DEFAULT_TYPE, position: Position):
        """Show results filtered by position"""
        analyses = self.get_analyses_by_position(position)
        
        if not analyses:
            message = f"–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position.value}."
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_candidates")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup)
            return
        
        message = f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position.value.upper()}:**\n\n"
        
        keyboard = []
        for analysis in analyses:
            candidate = self.db.get_candidate(analysis.candidate_id)
            candidate_name = f"{candidate.first_name} {candidate.last_name}" if candidate else f"ID: {analysis.candidate_id}"
            
            status_emoji = "‚úÖ" if analysis.hr_recommendation == "recommended" else "‚ö†Ô∏è" if analysis.hr_recommendation == "needs_clarification" else "‚ùå"
            
            message += f"{status_emoji} **{candidate_name}**\n"
            message += f"   –û—Ü–µ–Ω–∫–∞: {analysis.overall_score:.2f}/1.0\n"
            message += f"   –î–∞—Ç–∞: {analysis.created_at.strftime('%d.%m.%Y')}\n\n"
            
            keyboard.append([InlineKeyboardButton(
                f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {candidate_name}",
                callback_data=f"result_{analysis.candidate_id}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_candidates")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
    
    async def show_statistics(self, query, context: ContextTypes.DEFAULT_TYPE):
        """Show interview statistics"""
        stats = self.get_statistics()
        
        message = f"""
üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é**

üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
   ‚Ä¢ –í—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é: {stats['total_interviews']}
   ‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['today_interviews']}
   ‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats['week_interviews']}

üéØ **–ü–æ –ø–æ–∑–∏—Ü–∏—è–º:**
   ‚Ä¢ –ü—Ä–æ–¥–∞–∂–∏: {stats['sales_count']}
   ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {stats['qa_count']}

‚úÖ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ: {stats['recommended_count']}
   ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è: {stats['needs_clarification_count']}
   ‚Ä¢ –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ: {stats['not_recommended_count']}

üìä **–°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏:**
   ‚Ä¢ –û–±—â–∞—è: {stats['avg_overall_score']:.2f}/1.0
   ‚Ä¢ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {stats['avg_originality_score']:.2f}/1.0
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
    
    def get_recent_analyses(self, limit: int = 10) -> List[InterviewAnalysis]:
        """Get recent interview analyses"""
        # This would need to be implemented in Database class
        # For now, return empty list
        return []
    
    def get_analyses_by_position(self, position: Position) -> List[InterviewAnalysis]:
        """Get analyses filtered by position"""
        # This would need to be implemented in Database class
        # For now, return empty list
        return []
    
    def get_statistics(self) -> dict:
        """Get interview statistics"""
        # This would need to be implemented in Database class
        # For now, return mock data
        return {
            'total_interviews': 0,
            'today_interviews': 0,
            'week_interviews': 0,
            'sales_count': 0,
            'qa_count': 0,
            'recommended_count': 0,
            'needs_clarification_count': 0,
            'not_recommended_count': 0,
            'avg_overall_score': 0.0,
            'avg_originality_score': 0.0
        }
    
    def get_recommendation_text(self, recommendation: str) -> str:
        """Get human-readable recommendation text"""
        recommendations = {
            'recommended': '‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É',
            'needs_clarification': '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ',
            'not_recommended': '‚ùå –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω'
        }
        return recommendations.get(recommendation, recommendation)
    
    def run(self):
        """Run admin panel"""
        # Create application
        application = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()
        
        # Add handlers
        application.add_handler(CommandHandler("admin", self.admin_start))
        application.add_handler(CallbackQueryHandler(self.handle_admin_callback))
        
        # Start the bot
        logger.info("Starting Admin Panel...")
        application.run_polling()

if __name__ == "__main__":
    # Add admin users here
    admin_panel = AdminPanel()
    # admin_panel.add_admin(123456789)  # Replace with actual admin user IDs
    
    admin_panel.run() 